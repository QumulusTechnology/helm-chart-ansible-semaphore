---

{{ $dbCertificateDir := "/var/lib/postgresql/database-certificates" }}
{{ $dbCertificateFilename := "postgres" }}
{{ $dbUser := 70 }}
{{ $dbGroup := 70 }}

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ template "semaphore.namespace" . }}
  name: {{ include "semaphore.name" . }}
  labels:
    {{- include "semaphore.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "semaphore.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "semaphore.selectorLabels" . | nindent 8 }}
    spec:
      restartPolicy: Always
      {{- if .Values.database.enabled }}
      initContainers:
        - name: database-certificate-creation
          image: alpine:latest
          imagePullPolicy: Always
          command: [ 'sh', '-c' ]
          args:
            - apk update;
              apk add openssl;
              openssl genrsa -out {{ $dbCertificateFilename }}.key 4096;
              openssl req -new -key {{ $dbCertificateFilename }}.key -out {{ $dbCertificateFilename }}.csr -subj "/C=/ST=/L=/O=/CN=semaphore.local";
              openssl x509 -req -days 3650 -in {{ $dbCertificateFilename }}.csr -signkey {{ $dbCertificateFilename }}.key -out {{ $dbCertificateFilename }}.crt;
              mv postgres.* {{ $dbCertificateDir }};
              chmod -R 600 {{ $dbCertificateDir }}/{{ $dbCertificateFilename }}.key;
              chmod -R 640 {{ $dbCertificateDir }}/{{ $dbCertificateFilename }}.csr;
              chmod -R 640 {{ $dbCertificateDir }}/{{ $dbCertificateFilename }}.crt;
              chown -R "{{ $dbUser }}":"{{ $dbGroup }}" {{ $dbCertificateDir }}
          volumeMounts:
            - mountPath: {{ $dbCertificateDir }}
              name: database-certificates-volume
      {{- end }}
      containers:
        - name: "semaphore"
          image: "{{ .Values.semaphore.image }}"
          imagePullPolicy: "{{ .Values.semaphore.imagePullPolicy }}"
          command: [ 'sh', '-c' ]
          args:
            - while ! nc -w 1 "{{- include "semaphore.database.host" . }}" "{{- include "semaphore.database.port" . }}" ; do echo "waiting for database"; sleep 1; done;
              semaphore service
          ports:
            - containerPort: {{ default 3000 .Values.semaphore.containerPort | int}}
          volumeMounts:
            - mountPath: /home/semaphore/config.json
              name: semaphore-configuration
              subPath: config.json
              readOnly: true
          readinessProbe:
            httpGet:
              port: {{ default 3000 .Values.semaphore.containerPort | int }}
              path: /ping
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 3
          livenessProbe:
            httpGet:
              port: {{ default 3000 .Values.semaphore.containerPort | int }}
              path: /
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 3
        {{- if .Values.database.enabled }}
        - name: "semaphore-database"
          image: "{{ .Values.database.image }}"
          imagePullPolicy: "{{ .Values.database.imagePullPolicy }}"
          args: [ '-c', 'ssl=on', '-c', 'ssl_cert_file={{ $dbCertificateDir }}/{{ $dbCertificateFilename }}.crt', '-c', 'ssl_key_file={{ $dbCertificateDir }}/{{ $dbCertificateFilename }}.key' ]
          ports:
            - containerPort: {{ default 5432 .Values.database.containerPort | int }}
          volumeMounts:
            {{- if .Values.database.persistenceEnabled }}
            - mountPath: /var/lib/postgresql/data
              name: semaphore-database-volume-storage
              subPath: postgres
            {{- end }}
            - mountPath: {{ $dbCertificateDir }}
              name: database-certificates-volume
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: semaphore-database-secrets
                  key: databaseName
                  optional: false
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: semaphore-database-secrets
                  key: userName
                  optional: false
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: semaphore-database-secrets
                  key: userPassword
                  optional: false
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 3
            tcpSocket:
              port: {{ default 5432 .Values.database.containerPort | int }}
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 3
            tcpSocket:
              port: {{ default 5432 .Values.database.containerPort | int }}
        {{- end}}
      volumes:
        - name: semaphore-configuration
          secret:
            secretName: "{{ include "semaphore.config.secretName" . }}"
        {{- if .Values.database.enabled }}
        - name: database-certificates-volume
          emptyDir: { }
        {{- if .Values.database.persistenceEnabled }}
        - name: semaphore-database-volume-storage
          persistentVolumeClaim:
            claimName: {{ include "semaphore.database.volume.name" . }}
        {{- end }}
        {{- end }}
