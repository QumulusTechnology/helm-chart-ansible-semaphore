---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ template "semaphore.namespace" . }}
  name: {{ include "semaphore.name" . }}
  labels:
    {{- include "semaphore.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "semaphore.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "semaphore.selectorLabels" . | nindent 8 }}
    spec:
      restartPolicy: Always
      imagePullSecrets:
        {{- toYaml .Values.semaphore.imagePullSecrets | nindent 8 }}
      initContainers:
        - name: wait-for-database
          image: alpine:latest
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c']
          args:
            - while ! nc -w 1 "${POSTGRES_HOST}" "${POSTGRES_PORT}" ; do echo "waiting for database"; sleep 1; done; echo "Database responded"
          env:
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.database.secret.name }}"
                  key: "{{ .Values.database.secret.keys.host }}"
            - name: POSTGRES_PORT
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.database.secret.name }}"
                  key: "{{ .Values.database.secret.keys.port }}"
        - name: create-config-file
          image: alpine:latest
          imagePullPolicy: Always
          command: ['sh', '-c']
          args:
            - cp /tmp/config_template.json /tmp/config/config.json;
              sed -i "s/##HOST##/${POSTGRES_HOST}:${POSTGRES_PORT}/" /tmp/config/config.json;
              sed -i "s/##DATABASE_NAME##/${POSTGRES_DATABASE}/" /tmp/config/config.json;
              sed -i "s/##USER_NAME##/${POSTGRES_USER}/" /tmp/config/config.json;
              sed -i "s/##USER_PASSWORD##/${POSTGRES_PASSWORD}/" /tmp/config/config.json;
              echo "Config file created"
          env:
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.database.secret.name }}"
                  key: "{{ .Values.database.secret.keys.host }}"
            - name: POSTGRES_PORT
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.database.secret.name }}"
                  key: "{{ .Values.database.secret.keys.port }}"
            - name: POSTGRES_DATABASE
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.database.secret.name }}"
                  key: "{{ .Values.database.secret.keys.databaseName }}"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.database.secret.name }}"
                  key: "{{ .Values.database.secret.keys.username }}"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.database.secret.name }}"
                  key: "{{ .Values.database.secret.keys.password }}"
          volumeMounts:
            - mountPath: /tmp/config
              name: semaphore-config-file
            - mountPath: /tmp/config_template.json
              name: semaphore-configuration
              subPath: config.json
              readOnly: true
        {{- if and ( include "semaphore.restore.fromGcsStorage" . ) .Release.IsInstall }}
        {{- if and ( default "true" .Values.restore.backupBeforeRestore ) ( include "semaphore.backup.toGcsStorage" . )}}
        - name: create-database-dump-file
          image: "{{ .Values.database.image.name }}:{{ .Values.database.image.tag }}"
          imagePullPolicy: "{{ .Values.database.imagePullPolicy }}"
          command: [ 'sh', '-c' ]
          args:
            - echo "${POSTGRES_HOST}:${POSTGRES_PORT}:${POSTGRES_DATABASE}:${POSTGRES_USER}:${POSTGRES_PASSWORD}" > "$HOME/.pgpass";
              set -exuv;
              chmod 600 "$HOME/.pgpass";
              sourceFile="/mnt/shared-database-dump/database-dump.sql";
              compressedSourceFile="/mnt/shared-database-dump/database-dump.tar.gz";
              pg_dump --username "${POSTGRES_USER}" --host "${POSTGRES_HOST}" {{ include "semaphore.backup.pgDump.extraOptions" . }} "${POSTGRES_DATABASE}" > "${sourceFile}";
              tar cvzf "${compressedSourceFile}" --directory "$(dirname "${sourceFile}")" .;
              ls -lah "${compressedSourceFile}"
          env:
            - name: GZIP
              value: "-9"
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secret.name }}
                  key: {{ .Values.database.secret.keys.host }}
            - name: POSTGRES_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secret.name }}
                  key: {{ .Values.database.secret.keys.port }}
            - name: POSTGRES_DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secret.name }}
                  key: {{ .Values.database.secret.keys.databaseName }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secret.name }}
                  key: {{ .Values.database.secret.keys.username }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secret.name }}
                  key: {{ .Values.database.secret.keys.password }}
          volumeMounts:
            - name: shared-database-dump-directory
              mountPath: /mnt/shared-database-dump
        - name: postgresql-database-dump-to-google-cloud-storage
          imagePullPolicy: IfNotPresent
          image: "{{ .Values.backup.image.name }}:{{ .Values.backup.image.tag }}"
          command: [ 'bash', '-c' ]
          args:
            - set -exuv;
              compressedSourceFile="/mnt/shared-database-dump/database-dump.tar.gz";
              filename="/before-restore-$(date +"{{- include "semaphore.backup.dateFormat" . }}").tar.gz";
              gcloud auth activate-service-account "${GCS_SERVICE_ACCOUNT_EMAIL}" --key-file=/tmp/key.json --project="${GCS_PROJECT_ID}";
              remoteFilePath="$(echo "${GCS_BUCKET}${GCS_BUCKET_DIRECTORY}${filename}" | sed -E 's,\/+,/,'g)";
              gsutil cp "${compressedSourceFile}" "gs://${remoteFilePath}"
          env:
            - name: GCS_SERVICE_ACCOUNT_EMAIL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backup.secret.name }}
                  key: {{ .Values.backup.secret.keys.serviceAccountEmail }}
            - name: GCS_PROJECT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backup.secret.name }}
                  key: {{ .Values.backup.secret.keys.projectId }}
            - name: GCS_BUCKET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backup.secret.name }}
                  key: {{ .Values.backup.secret.keys.bucket }}
            - name: GCS_BUCKET_DIRECTORY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backup.secret.name }}
                  key: {{ .Values.backup.secret.keys.bucketDirectory }}
          volumeMounts:
            - name: gcp-backup-key-volume
              mountPath: /tmp/key.json
              subPath: {{ .Values.backup.secret.keys.keyJson }}
            - name: shared-database-dump-directory
              mountPath: /mnt/shared-database-dump
        {{- end }}
        - name: download-database-dump-file
          image: "{{ .Values.restore.image.name }}:{{ .Values.restore.image.tag }}"
          imagePullPolicy: Always
          command: [ 'bash', '-c' ]
          args:
            - set -xuve;
              filename="/{{ .Values.restore.archiveFileName }}.tar.gz";
              filename="$(echo "${filename}" | sed -E 's/(.tar.gz)+/.tar.gz/')";
              file="$(echo "/tmp/dump${filename}" |  sed -E 's,\/+,/,'g)";
              gcloud auth activate-service-account "${GCS_SERVICE_ACCOUNT_EMAIL}" --key-file=/tmp/key.json --project="${GCS_PROJECT_ID}";
              remoteFilePath="$(echo "${GCS_BUCKET}${GCS_BUCKET_DIRECTORY}${filename}" | sed -E 's,\/+,/,'g)";
              gsutil cp "gs://${remoteFilePath}" "${file}"
          env:
            - name: GCS_SERVICE_ACCOUNT_EMAIL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.restore.secret.name }}
                  key: {{ .Values.restore.secret.keys.serviceAccountEmail }}
            - name: GCS_PROJECT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.restore.secret.name }}
                  key: {{ .Values.restore.secret.keys.projectId }}
            - name: GCS_BUCKET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.restore.secret.name }}
                  key: {{ .Values.restore.secret.keys.bucket }}
            - name: GCS_BUCKET_DIRECTORY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.restore.secret.name }}
                  key: {{ .Values.restore.secret.keys.bucketDirectory }}
          volumeMounts:
            - mountPath: /tmp/dump
              name: shared-database-restore-directory
            - name: gcp-restore-key-volume
              mountPath: /tmp/key.json
              subPath: {{ .Values.restore.secret.keys.keyJson }}
        - name: restore-database-from-dump-file
          image: "{{ .Values.database.image.name }}:{{ .Values.database.image.tag }}"
          imagePullPolicy: Always
          command: [ 'sh', '-c' ]
          args:
            - set -exuv;
              echo "${POSTGRES_HOST}:${POSTGRES_PORT}:${POSTGRES_DATABASE}:${POSTGRES_USER}:${POSTGRES_PASSWORD}" > "$HOME/.pgpass";
              chmod 600 "$HOME/.pgpass";
              cd /tmp/dump;
              archiveFilename="$(echo "{{ .Values.restore.archiveFileName }}" | sed -E 's/(.tar.gz)+$//').tar.gz";
              tar zxvf "${archiveFilename}";
              pgDumpFileName="$(echo "{{ .Values.restore.pgDumpFileName}}" | sed -E 's/(.sql)+$//').sql";
              psql --username="${POSTGRES_USER}" --host="${POSTGRES_HOST}" --port="${POSTGRES_PORT}" "{{- include "semaphore.restore.psql.extraOptions" . }}" -d "${POSTGRES_DATABASE}" < "${pgDumpFileName}"
          env:
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.database.secret.name }}"
                  key: "{{ .Values.database.secret.keys.host }}"
            - name: POSTGRES_PORT
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.database.secret.name }}"
                  key: "{{ .Values.database.secret.keys.port }}"
            - name: POSTGRES_DATABASE
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.database.secret.name }}"
                  key: "{{ .Values.database.secret.keys.databaseName }}"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.database.secret.name }}"
                  key: "{{ .Values.database.secret.keys.username }}"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.database.secret.name }}"
                  key: "{{ .Values.database.secret.keys.password }}"
          volumeMounts:
            - mountPath: /tmp/dump
              name: shared-database-restore-directory
        {{- end }}
      containers:
        - name: "semaphore"
          image: "{{ .Values.semaphore.image.name }}:{{ .Values.semaphore.image.tag }}"
          imagePullPolicy: "{{ .Values.semaphore.imagePullPolicy }}"
          command: ['sh', '-c']
          args:
            - semaphore service
          ports:
            - containerPort: {{ default 3000 .Values.semaphore.containerPort | int}}
          volumeMounts:
            - mountPath: /home/semaphore/config.json
              name: semaphore-config-file
              subPath: config.json
          {{- if .Values.semaphore.existingSecretSSHDir }}
            - mountPath: /home/semaphore/.ssh
              name: ssh-keys
          {{- end }}
          readinessProbe:
            httpGet:
              port: {{ default 3000 .Values.semaphore.containerPort | int }}
              path: /ping
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 3
          livenessProbe:
            httpGet:
              port: {{ default 3000 .Values.semaphore.containerPort | int }}
              path: /
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 3
      volumes:
        - name: semaphore-configuration
          secret:
            secretName: {{ include "semaphore.config.configMapName" . }}
        - name: semaphore-config-file
          emptyDir: { }
        {{- if .Values.semaphore.existingSecretSSHDir }}
        - name: ssh-keys
          secret:
            secretName: {{ .Values.semaphore.existingSecretSSHDir }}
            defaultMode: 0600
        {{- end }}
        {{- if .Values.restore.enabled }}
        - name: shared-database-restore-directory
          emptyDir: { }
        {{- end }}
        {{- if include "semaphore.restore.fromGcsStorage" . }}
        - name: gcp-restore-key-volume
          secret:
            secretName: {{ .Values.restore.secret.name }}
        {{- if and ( default "true" .Values.restore.backupBeforeRestore ) ( include "semaphore.backup.toGcsStorage" . )}}
        - name: shared-database-dump-directory
          emptyDir: { }
        - name: gcp-backup-key-volume
          secret:
            secretName: {{ .Values.backup.secret.name }}
        {{- end }}
        {{- end }}
